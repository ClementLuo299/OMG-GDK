@startuml
title OMG Game Development Kit (GDK) - Overall Architecture

package "GDK Core" {
    package "gdk" {
        interface GameModule {
            +getGameId(): String
            +getGameName(): String
            +getGameDescription(): String
            +launchGame(Stage, GameMode, int, GameOptions, GameEventHandler): Scene
            +onGameClose(): void
            +getCustomSettings(): GameSettings
            +hasCustomSettings(): boolean
            +getSupportedGameModes(): GameMode[]
            +getSupportedDifficulties(): GameDifficulty[]
            +getSupportedPlayerCounts(): Map<GameMode, int[]>
        }
        
        interface GameSettings {
            +getCustomSettings(): List<GameSetting<?>>
            +validateSettings(): boolean
            +resetToDefaults(): void
        }
        
        abstract class GameSetting<T> {
            +getKey(): String
            +getDisplayName(): String
            +createControl(): Control
            +isValid(): boolean
        }
        
        class GameMode {
            +id: String
            +displayName: String
            +description: String
            +getCategory(): String
        }
        
        class GameDifficulty {
            +id: String
            +displayName: String
            +level: int
            +description: String
        }
        
        class GameOptions {
            +setOption(String, Object): void
            +getOption(String, Object): Object
            +hasOption(String): boolean
        }
        
        class GameState {
            +gameId: String
            +status: String
            +setStateValue(String, Object): void
            +getStateValue(String): Object
        }
        
        class GameEvent {
            +eventType: EventType
            +gameId: String
            +message: String
        }
        
        class ModuleLoader {
            +discoverModules(String): List<GameModule>
            +loadModule(File): GameModule
            +validateModule(GameModule): boolean
            +findMainClassRecursively(File, String): String
        }
        
        class Logging {
            +info(String): void
            +error(String): void
            +warning(String): void
            +debug(String): void
        }
    }
    
    package "launcher" {
        class GDKApplication {
            -gameSelector: ComboBox<GameModule>
            -gameModeSelector: ComboBox<GameMode>
            -currentGame: GameModule
            +launchGame(GameModule, GameMode, int, String, GameOptions): void
            +returnToLobby(): void
            +handleGameEvent(GameEvent): void
        }
        
        class GDKGameLobbyController {
            -jsonDataTextArea: TextArea
            -validateJsonButton: Button
            +launchGame(): void
            +validateJsonData(): void
            +openGameSettings(): void
            +updateGameInfo(): void
        }
        
        class GameSettingsDialog {
            +showAndWait(): boolean
            +getGameSettings(): GameSettings
        }
    }
}

package "Game Modules" {
    package "Example Module" {
        class ExampleMain {
            -metadata: GameMetadata
            -gameModule: ExampleGameModule
            +launchGame(...): Scene
            +handleJsonData(GameOptions): void
            +getCustomSettings(): GameSettings
        }
        
        class ExampleGameMetadata {
            +GAME_ID: String = "example"
            +GAME_NAME: String = "Example Game"
            +getSupportedGameModes(): GameMode[]
            +getSupportedDifficulties(): GameDifficulty[]
            +getCustomSettings(): GameSettings
        }
        
        class ExampleGameModule {
            +launchGame(...): Scene
            +createTestInterface(...): Scene
            +getCustomSettings(): GameSettings
        }
        
        class ExampleGameSettings {
            +getCustomSettings(): List<GameSetting<?>>
            +validateSettings(): boolean
        }
    }
    
    package "TicTacToe Module" {
        class TicTacToeMain {
            -metadata: GameMetadata
            -gameModule: TicTacToeModule
            +launchGame(...): Scene
            +handleJsonData(GameOptions): void
            +getCustomSettings(): GameSettings
        }
        
        class TicTacToeGameMetadata {
            +GAME_ID: String = "tictactoe"
            +GAME_NAME: String = "Tic Tac Toe"
            +getSupportedGameModes(): GameMode[]
            +getSupportedDifficulties(): GameDifficulty[]
            +getCustomSettings(): GameSettings
        }
        
        class TicTacToeModule {
            +launchGame(...): Scene
            +onGameClose(): void
        }
    }
}

' Core relationships - grouped by functionality
ModuleLoader --> GameModule : discovers
GameModule --> GameSettings : provides
GameSettings --> GameSetting : contains

' Game module delegation pattern
ExampleMain --> ExampleGameMetadata : delegates metadata
ExampleMain --> ExampleGameModule : delegates execution
ExampleMain --> ExampleGameSettings : provides settings
TicTacToeMain --> TicTacToeGameMetadata : delegates metadata
TicTacToeMain --> TicTacToeModule : delegates execution

' Interface implementations
ExampleMain ..|> GameModule : implements
TicTacToeMain ..|> GameModule : implements
ExampleGameMetadata ..|> GameModule : implements
TicTacToeGameMetadata ..|> GameModule : implements
ExampleGameSettings ..|> GameSettings : implements

' Launcher relationships
GDKApplication --> ModuleLoader : uses
GDKApplication --> GameEvent : handles
GDKGameLobbyController --> GDKApplication : controls
GDKGameLobbyController --> GameSettingsDialog : opens
GameSettingsDialog --> GameSettings : configures

' Game module usage
GameModule --> GameMode : uses
GameModule --> GameDifficulty : uses
GameModule --> GameOptions : uses
GameModule --> GameState : manages
GameModule --> GameEventHandler : communicates

note right of TicTacToeGameMetadata
  **TicTacToe has no custom settings:**
  • hasCustomSettings() returns false
  • getCustomSettings() returns null
end note

note right of ExampleGameSettings
  **Example Game has 6 custom settings:**
  • Sound Effects (boolean)
  • Maximum Turns (integer)
  • Player Name (string)
  • Background Music (boolean)
  • Difficulty Multiplier (integer)
  • Game Theme (string)
end note

note right of ModuleLoader
  **Flexible Module Discovery:**
  • Recursively searches for Main.class
  • Supports any package structure
  • No hardcoded package names
end note

@enduml 