@startuml

left to right direction
hide empty members
skinparam linetype ortho
skinparam nodesep 60
skinparam ranksep 60

title OMG Game Development Kit (GDK) - Architecture

' === GDK Core ===
package "GDK_Core" {

    package "launcher" {

        package "gui" {
            class GDKGameLobbyController {
                + void initialize(URL location, ResourceBundle resources)
                + void setViewModel(GDKViewModel viewModel)
                + void refreshAvailableGameModulesFast()
                + void refreshAvailableGameModules()
                + void checkStartupCompilationFailures()
                + void launchGameWithSavedJson(GameModule gameModule, String savedJson)
                + boolean launchSelectedGame()
                + void sendMessage()
                + void onApplicationShutdown()
                --
                - void setupUserInterface()
                - void setupEventHandlers()
                - void updateGameCountStatus()
                - void addUserMessage(String message)
                - void startLoadingAnimation()
                - void stopLoadingAnimation()
                - void detectDisabledModulesBeforeRecompilation(String path)
                - void checkAndRecompileModule(File moduleDir)
                - void openSettingsPage()
                --
                - ObjectMapper jsonDataMapper
                - ObservableList<GameModule> availableGameModules
                - GameModule selectedGameModule
                - GDKViewModel applicationViewModel
                - boolean isRefreshing
                - boolean isLoadingPersistenceSettings
                - static final long MESSAGE_INTERVAL_MS
            }

            GDKGameLobbyController -down-> GDK_Core.launcher.GDKApplication : uses
            GDKGameLobbyController -down-> GDK_Core.launcher.utils.ModuleDiscovery : uses
            GDKGameLobbyController -down-> GDK_Core.launcher.utils.ModuleCompiler : uses
            GDKGameLobbyController -down-> GDK_Core.launcher.utils.DialogUtil : uses
            GDKGameLobbyController -down-> GDK_Core.launcher.utils.GameLaunchUtil : uses
            GDKGameLobbyController -down-> GDK_Core.launcher.utils.TranscriptRecorder : uses
            GDKGameLobbyController --> GDK_Core.gdk.Logging : logs with
            GDKGameLobbyController --> GDK_Core.gdk.GameModule : loads & launches
            GDKGameLobbyController --> GDKViewModel : delegates logic

            class GDKViewModel {
                ' ==================== Dependencies ====================
                - Stage primaryApplicationStage
                - Scene mainLobbyScene
                - GameModule currentlyRunningGame
                - Stage serverSimulatorStage
                - ServerSimulatorController serverSimulatorController
                - boolean serverSimulatorRequestedClosed

                ' ==================== Constructor ====================
                + GDKViewModel()

                ' ==================== Stage and Scene Management ====================
                + void setPrimaryStage(Stage)
                + void setMainLobbyScene(Scene)
                + void returnToLobby()
                + boolean isGameRunning()
                + Scene getCurrentGameScene()

                ' ==================== Game Launching and Actions ====================
                + void handleLaunchGame(GameModule, String)
                + void handleRefreshGameList()

                ' ==================== Game Management ====================
                - void launchGameWithScene(GameModule, String)
                - void updateGameStateAfterSuccessfulLaunch(GameModule)
                - void setupGameCloseHandler()

                ' ==================== Server Simulator ====================
                - void createServerSimulator()
                - Scene loadServerSimulatorScene()
                - void configureServerSimulatorStage(Scene)
                - void setupServerSimulatorCloseHandler()

                ' ==================== Cleanup ====================
                - void cleanupGameAndServerSimulator()
                - void cleanupCurrentGame()
                - void cleanupServerSimulator()
                - void closeServerSimulator()

                ' ==================== Utilities ====================
                - void refreshAvailableGameModules()
                - void setupMessagingBridgeConsumer()
                - boolean isSinglePlayerModeFromJson(String)
                - boolean isLocalMultiplayerModeFromJson(String)
            }

            GDKViewModel --> GDK_Core.gdk.GameModule : manages
            GDKViewModel --> GDK_Core.gdk.Logging : logs with
            GDKViewModel --> GDK_Core.gdk.MessagingBridge : communicates via
            GDKViewModel --> GDK_Core.launcher.utils.ModuleDiscovery : discovers modules
            GDKViewModel --> GDK_Core.launcher.utils.ModuleCompiler : loads modules
            GDKViewModel --> GDK_Core.launcher.utils.TranscriptRecorder : records transcripts
            GDKViewModel --> GDK_Core.launcher.gui.ServerSimulatorController : controls
            GDKViewModel --> GDK_Core.launcher.gui.GDKGameLobbyController : linked with
            GDKViewModel --> GDK_Core.launcher.GDKApplication : accesses constants

            class ServerSimulatorController {
                ' ==================== FXML UI Elements ====================
                - VBox rootContainer
                - TextArea receivedMessagesDisplayArea
                - TextField messageInputField
                - Button sendMessageButton
                - Button clearMessagesButton
                - Button saveMessagesButton
                - Button loadMessagesButton
                - Button closeWindowButton

                ' ==================== Dependencies ====================
                - Stage serverSimulatorStage
                - Consumer<String> gameMessageHandler
                - GDKApplication gdkApplication

                ' ==================== Constants ====================
                - static final String INPUT_PERSISTENCE_FILE

                ' ==================== Initialization ====================
                + void initialize()
                - void setupMessageInputHandling()
                - void setupSendButtonStateManagement()
                - void setupSaveLoadHandlers()
                - void handleSaveMessages()
                - void handleLoadMessages()
                - void setupClearHandler()

                ' ==================== Input Persistence ====================
                - void saveInputContent()
                - void loadInputContent()
                - void clearSavedInputContent()

                ' ==================== Setup Methods ====================
                + void setStage(Stage)
                + void setGDKApplication(GDKApplication)
                + void setMessageHandler(Consumer<String>)

                ' ==================== Message Handling ====================
                - void handleSendMessageAction()
                - void sendMessageToGame(String)
                - void addSentMessageToDisplay(String)
                - void clearMessageInputField()
                + void addReceivedMessageToDisplay(String)

                ' ==================== UI Actions ====================
                - void handleClearMessagesAction()
                - void handleCloseWindowAction()

                ' ==================== Utility ====================
                + VBox getRootContainer()
                + void onClose()
            }

            ServerSimulatorController --> GDK_Core.gdk.Logging : uses
            ServerSimulatorController --> GDK_Core.launcher.GDKApplication : coordinates with
            ServerSimulatorController <-- GDK_Core.launcher.gui.GDKViewModel : created and managed by
            ServerSimulatorController <-- GDK_Core.launcher.gui.GDKGameLobbyController : indirectly connected

            class SettingsPageController {
                ' ==================== FXML UI Elements ====================
                - Button backButton
                - Label statusLabel
                - JFXToggleButton settingsAutoLaunchToggle
                - JFXToggleButton settingsAutoSelectGameToggle
                - JFXToggleButton settingsJsonPersistenceToggle
                - ComboBox<String> settingsThemeSelector
                - Slider settingsFontSizeSlider
                - Label settingsFontSizeLabel
                - JFXToggleButton settingsAutoRefreshToggle
                - JFXToggleButton settingsCompilationCheckToggle
                - JFXToggleButton settingsDebugModeToggle
                - JFXToggleButton settingsPerformanceModeToggle

                ' ==================== Dependencies ====================
                - GDKGameLobbyController mainController
                - Scene mainScene
                - Preferences preferences
                - boolean isInitializing

                ' ==================== Initialization ====================
                + void initialize(URL, ResourceBundle)
                + void setMainController(GDKGameLobbyController)
                + void setMainScene(Scene)

                ' ==================== UI Setup ====================
                - void setupUserInterface()
                - void setupEventHandlers()

                ' ==================== Settings Listeners ====================
                - void setupSettingsListeners()
                - <T> ChangeListener<T> createSettingsListener(String)

                ' ==================== Settings Management ====================
                - void loadSettings()
                - void saveSetting(String, String)
                - void saveAllSettings()

                ' ==================== Controller Integration ====================
                - void synchronizeWithMainController()

                ' ==================== Utility Methods ====================
                - void updateStatus(String)
                - void returnToMainLobby()

                ' ==================== Public API ====================
                + boolean isAutoLaunchEnabled()
                + boolean isAutoSelectGameEnabled()
                + boolean isJsonPersistenceEnabled()
                + String getSelectedTheme()
                + int getFontSize()
            }

            SettingsPageController --> GDK_Core.gdk.Logging : logs actions
            SettingsPageController --> GDK_Core.launcher.gui.GDKGameLobbyController : synchronizes with

            class SingleJsonEditor {
                ' ==================== Fields ====================
                - CodeArea codeArea
                - StringProperty textProperty
                - String title

                ' Syntax Highlighting Patterns
                - static final String[] KEYWORDS
                - static final Pattern PATTERN

                ' ==================== Constructors ====================
                + SingleJsonEditor(String)
                + SingleJsonEditor()

                ' ==================== Setup Methods ====================
                - void setupCodeArea()
                - void setupSyntaxHighlighting()
                - void setupContextMenu()
                - void setupKeyboardShortcuts()
                - void createLayout()
                - void createToolbar()

                ' ==================== Syntax Highlighting ====================
                - StyleSpans<Collection<String>> computeHighlighting(String)

                ' ==================== File and Content Management ====================
                - void formatJson()
                - void saveToFile()
                - void loadFromFile()
                - void showAlert(AlertType, String, String, String)

                ' ==================== Text and Property Accessors ====================
                + StringProperty textProperty()
                + String getText()
                + void setText(String)
                + void clear()
                + CodeArea getCodeArea()
                + String getTitle()
                + void setTitle(String)
                + void setVerticalGrowth(Priority)

                ' ==================== Helpers ====================
                - String getCurrentLine()
                - String getIndentation(String)
            }

            SingleJsonEditor --> GDK_Core.launcher.utils.DialogUtil : displays alerts
        }
    }
}

@enduml
