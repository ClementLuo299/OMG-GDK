@startuml

left to right direction
hide empty members
skinparam linetype ortho
skinparam nodesep 60
skinparam ranksep 60

title OMG Game Development Kit (GDK) - Architecture

' === GDK Core ===
package "GDK_Core" {

    package "launcher" {

        package "utils" {

            class DialogUtil {
                {static} + showError(title: String, message: String)
                {static} + showError(title: String, header: String, message: String)
                {static} + showError(title: String, header: String, message: String, exception: Exception)
                {static} + showWarning(title: String, message: String)
                {static} + showInfo(title: String, message: String)
                {static} + showConfirmation(title: String, message: String) : boolean
                {static} + showConfirmation(title: String, header: String, message: String, confirmButton: String, cancelButton: String) : boolean
                {static} + showCustomDialog(title: String, content: Node) : Dialog<Void>
                {static} + showExpandableDialog(title: String, header: String, content: String, expandable: Node, alertType: AlertType)
                {static} + showStartupError(title: String, header: String, message: String)
                {static} + showFatalError(title: String, header: String, message: String)
                {static} + showGameError(title: String, message: String)
                {static} + showJsonError(title: String, message: String)
                {static} + showCompilationError(title: String, message: String)
                {static} + runOnFXThread(runnable: Runnable)
                {static} + styleDialogPane(alert: Alert)
            }

            class GameLaunchUtil {
                - jsonMapper : ObjectMapper
                {static} + launchGameWithConfiguration(gameModule: GameModule, jsonConfigurationData: Map<String,Object>, isAutoLaunch: boolean) : boolean
                {static} + parseJsonString(jsonString: String) : Map<String,Object>
            }

            GameLaunchUtil ..> GameModule : sends config/start messages
            GameLaunchUtil ..> Logging : logs launch info
            GameLaunchUtil ..> TranscriptRecorder : records game I/O
            GameLaunchUtil ..> StartMessageUtil : loads default start message

            class ModuleCompiler {
                - uiController : GDKGameLobbyController
                - lastCompilationFailures : List<String>
                {static} + compileModule(modulePath: String) : boolean
                {static} + loadModule(moduleDir: File) : GameModule
                {static} + loadModules(moduleDirectories: List<File>) : List<GameModule>
                {static} + needsCompilation(moduleDir: File) : boolean
                {static} + compileModulesIfNeeded(moduleDirectories: List<File>) : List<String>
                {static} + needToBuildModules() : boolean
                {static} + setUIController(controller: GDKGameLobbyController)
                {static} + getUIController() : GDKGameLobbyController
                {static} + storeCompilationFailures(failures: List<String>)
                {static} + getLastCompilationFailures() : List<String>
                {static} + clearCompilationFailures()
                {static} + addCompilationFailure(moduleName: String)
                .. Private Helpers ..
                - findMavenCommand() : String
                - createModuleClassLoader(moduleDir: File) : URLClassLoader
                - validateMainClass(mainClass: Class<?>) : boolean
            }

            ModuleCompiler ..> Logging : logs compilation & loading
            ModuleCompiler ..> GameModule : creates instances
            ModuleCompiler ..> ModuleDiscovery : validates modules
            ModuleCompiler ..> GDKGameLobbyController : updates UI

            class ModuleDiscovery {
                {static} + discoverModules(modulesDirectoryPath: String) : List<GameModule>
                {static} + countValidModules(modulesDirectory: File) : int
                {static} + getValidModuleDirectories(modulesDirectory: File) : List<File>
                {static} + isValidModuleStructure(moduleDir: File) : boolean
                {static} + moduleDirectoryExists(modulePath: String) : boolean
                {static} + calculateTotalSteps() : int
                {static} + getAllModuleDirectories(modulesDirectory: File) : List<File>
                {static} + testModulesDirectoryAccess(modulesDirectoryPath: String) : boolean
                {static} + diagnoseModuleDetectionIssues(modulesDirectoryPath: String)
                {static} + moduleNeedsCompilation(moduleDir: File) : boolean
                {static} + reportModuleCompilationStatus(modulesDirectory: File)
                --
                - validateMainJavaFile(mainJavaFile: File) : boolean
                - validateMetadataJavaFile(metadataJavaFile: File) : boolean
            }

            ModuleDiscovery ..> Logging : logs diagnostics
            ModuleDiscovery ..> GameModule : validates interface presence

            class StartMessageUtil {
                - DEFAULT_FILE_NAME : String
                - LOCAL_MULTIPLAYER_FILE : String
                - SINGLE_PLAYER_FILE : String
                - ALL_MODES_FILE : String
                --
                {static} + loadDefaultStartMessage() : Map<String,Object>
                {static} + loadLocalMultiplayerStartMessage() : Map<String,Object>
                {static} + loadSinglePlayerStartMessage() : Map<String,Object>
                {static} + loadAllModesStartMessage() : Map<String,Object>
                --
                {static} + loadStartMessage(filePath: Path) : Map<String,Object>
                {static} + ensureSavedDirectoryExists()
                --
                - createDefaultStartMessage() : Map<String,Object>
            }

            StartMessageUtil ..> Logging : logs info/errors

            class TranscriptRecorder {
                - inSession : boolean
                - transcriptEntries : List<Map<String,Object>>
                --
                {static} + startSession()
                {static} + startSession(gameName:String, gameVersion:String)
                {static} + recordToGame(message:Map<String,Object>)
                {static} + recordFromGame(message:Map<String,Object>)
                {static} + endSessionIfEndDetected(message:Map<String,Object>)
                --
                {static} + saveTranscript(targetFile:Path) : Path
                {static} + saveTranscriptAsText(targetFile:Path) : Path
                {static} + saveTranscriptBothFormats(baseFileName:String) : Path[]
                {static} + saveCurrentTranscript() : Path[]
                --
                {static} + clear()
                {static} + isInSession() : boolean
                {static} + getTranscriptEntryCount() : int
                {static} + printStatus()
                {static} + getSessionSummary() : Map<String,Object>
                --
                - calculateSessionDuration(startTime:Object, endTime:Object) : String
                - generateMessageFlowSummary(messages:List<Map<String,Object>>) : Map<String,Object>
                - getMessageType(function:String) : String
                - generateMessageSummary(function:String, details:Map<String,Object>) : String
                - formatTimestamp(instant:Instant) : String
            }
        }
    }
}

@enduml
