@startuml

title GDK Data Flow and Component Interactions

actor User
participant "GDK Lobby" as Lobby
participant "Game Selector" as Selector
participant "Settings Dialog" as Settings
participant "Game Module" as Module
participant "Game Metadata" as Metadata
participant "Game Implementation" as Game
participant "Module Loader" as Loader
participant "Event Handler" as Events

== Module Discovery ==
User -> Lobby: Start GDK
Lobby -> Loader: discoverModules()
Loader -> Loader: Scan modules directory
Loader -> Lobby: Return GameModule list
Lobby -> Selector: Populate game list

== Game Configuration ==
User -> Selector: Select game
Selector -> Metadata: getSupportedGameModes()
Metadata -> Selector: Return supported modes
Selector -> Metadata: getSupportedDifficulties()
Metadata -> Selector: Return supported difficulties
Selector -> Metadata: getSupportedPlayerCounts()
Metadata -> Selector: Return player counts

== Custom Settings Configuration ==
User -> Selector: Click Settings
Selector -> Metadata: hasCustomSettings()
Metadata -> Selector: Return true/false
alt Has Custom Settings
    Selector -> Metadata: getCustomSettings()
    Metadata -> Selector: Return GameSettings
    Selector -> Settings: Open dialog with GameSettings
    Settings -> Settings: Create UI controls
    User -> Settings: Configure settings
    Settings -> Settings: Validate settings
    Settings -> Selector: Return configured settings
end

== JSON Data Input ==
User -> Selector: Enter JSON data
Selector -> Selector: Validate JSON syntax
Selector -> Selector: Parse JSON to Map

== Game Launch ==
User -> Selector: Click Launch
Selector -> Selector: Validate configuration
Selector -> Module: launchGame(Stage, GameMode, PlayerCount, GameOptions, EventHandler)
Module -> Metadata: Delegate metadata calls
Module -> Game: Delegate game execution
Game -> Game: Initialize game with settings
Game -> Events: Send GAME_STARTED event
Events -> Lobby: Handle game event

== Game Execution ==
Game -> Game: Run game logic
Game -> Events: Send game events
Events -> Lobby: Handle events
User -> Game: Interact with game
Game -> Game: Update game state

== Game Completion ==
User -> Game: End game
Game -> Events: Send GAME_ENDED event
Events -> Lobby: Handle game event
Game -> Module: onGameClose()
Module -> Lobby: Return to lobby

@enduml 