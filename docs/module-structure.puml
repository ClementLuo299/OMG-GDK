@startuml

title Game Module Structure - Main/GameMetadata/GameModule Pattern

package "Game Module" {
    class Main {
        -metadata: GameMetadata
        -gameModule: GameModule
        --
        +Main()
        +launchGame(Stage, GameMode, int, GameOptions, GameEventHandler): Scene
        +onGameClose(): void
        +handleJsonData(GameOptions): void
        +processJsonData(Map<String, Object>): void
        --
        ' Metadata delegation methods
        +getGameId(): String
        +getGameName(): String
        +getGameDescription(): String
        +getSupportedGameModes(): GameMode[]
        +getSupportedDifficulties(): GameDifficulty[]
    }
    
    class GameMetadata {
        ' Game information constants
        +GAME_ID: String
        +GAME_NAME: String
        +GAME_DESCRIPTION: String
        +GAME_CATEGORY: String
        +MIN_PLAYERS: int
        +MAX_PLAYERS: int
        +ESTIMATED_DURATION: int
        --
        ' Metadata methods
        +getGameId(): String
        +getGameName(): String
        +getGameDescription(): String
        +getSupportedGameModes(): GameMode[]
        +getSupportedDifficulties(): GameDifficulty[]
        +getSupportedPlayerCounts(): Map<GameMode, int[]>
        +getDefaultGameMode(): GameMode
        +getDefaultDifficulty(): GameDifficulty
        +supportsGameMode(GameMode): boolean
        +supportsDifficulty(GameDifficulty): boolean
        +supportsPlayerCount(GameMode, int): boolean
        --
        ' Delegated execution
        +launchGame(...): Scene
        +getGameState(): GameState
        +loadGameState(GameState): void
        +onGameClose(): void
    }
    
    class GameModule {
        ' Game implementation
        +launchGame(Stage, GameMode, int, GameOptions, GameEventHandler): Scene
        +onGameClose(): void
        +getGameState(): GameState
        +loadGameState(GameState): void
        --
        ' UI creation methods
        +createGameInterface(...): Scene
        +handleUserInput(...): void
        +updateGameState(...): void
    }
}

package "GDK Core" {
    interface GameModuleInterface {
        +getGameId(): String
        +getGameName(): String
        +getGameDescription(): String
        +launchGame(Stage, GameMode, int, GameOptions, GameEventHandler): Scene
        +onGameClose(): void
        +getGameState(): GameState
        +loadGameState(GameState): void
    }
    
    class GameOptions {
        +setOption(String, Object): void
        +getOption(String, Object): Object
        +hasOption(String): boolean
    }
    
    class GameEventHandler {
        +handleGameEvent(GameEvent): void
    }
}

' Relationships
Main ..|> GameModuleInterface : implements
GameMetadata ..|> GameModuleInterface : implements
GameModule ..|> GameModuleInterface : implements

Main --> GameMetadata : delegates metadata
Main --> GameModule : delegates execution
Main --> GameOptions : processes JSON data
Main --> GameEventHandler : sends events

GameMetadata --> GameModule : delegates execution
GameMetadata --> GameOptions : uses for state

GameModule --> GameOptions : uses for configuration
GameModule --> GameEventHandler : communicates events

note right of Main
  **Main Class Responsibilities:**
  • JSON communication
  • Game start/stop control
  • Event handling
  • Delegation coordination
end note

note right of GameMetadata
  **GameMetadata Class Responsibilities:**
  • Game information
  • Supported modes/difficulties
  • Player count configurations
  • Default settings
  • Validation methods
end note

note right of GameModule
  **GameModule Class Responsibilities:**
  • Actual game logic
  • UI implementation
  • User interaction
  • Game state management
end note

@enduml 